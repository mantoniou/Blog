subtitle = "From 1970 to 2016")+
theme_fivethirtyeight() +
scale_y_continuous(labels = scales::percent_format())
songs %>%
mutate(date = as_date(paste(as.character(songs$year), "-01", "-01"))) %>%
mutate(decade = floor_date(date, years(5))) %>%
group_by(decade, genre) %>%
summarise(N = n()) %>%
mutate(freq = round(N/sum(N), 2)) %>%
filter(genre %in% c("Country", "Hip-Hop", "Metal", "Pop", "Rock")) %>%
ggplot(aes(decade, freq, colour = genre)) +
# geom_line() +
geom_smooth(se = FALSE) +
labs(y = "Proportion of total songs", x = "Year",
title = "Smoothed frequency of total songs per Music Genre",
subtitle = "Top 5 genres are selected")+
theme_fivethirtyeight() +
scale_y_continuous(labels = scales::percent_format())
## number of characters per song
songs %>%
ggplot() +
geom_boxplot(aes(genre, characters), fill = "steelblue", alpha = 0.7) +
labs(y = "Length of song lyrics (in characters)", x = "Music Genre",
title = "Length of song lyrics per music genre",
subtitle = "From 1970 to 2016")+
theme_fivethirtyeight() +
ylim(0, 10000)
songs %>%
group_by(genre) %>%
summarise(characters = round(mean(characters, na.rm = TRUE), 0)) %>%
ggplot(aes(reorder(genre, -characters), characters)) +
geom_col(fill = "steelblue", alpha = 0.7) +
labs(y = "Length of song lyrics (in characters)", x = "Music Genre",
title = "Average lyrics characters per music genre song",
subtitle = "From 1970 to 2016")+
theme_fivethirtyeight()
words <-
songs %>%
unnest_tokens(word, lyrics) %>%
group_by(genre, word) %>%
count() %>%
arrange(-n) %>%
group_by(genre) %>%
top_n(n = 100, wt = n)
# Select top 5 genres
genres <- c("Rock", "Hip-Hop", "Pop", "Country", "Metal")
for(i in 1:length(genres)){
temp <- filter(words, genre == genres[i])
# Create a word cloud
par(bg="grey30")
wordcloud(words = temp$word, freq = temp$n, col=terrain.colors(length(temp$word), alpha=0.9), random.order=FALSE, rot.per=0.3 )
title(main =  genres[i] , font.main = 1, col.main = "cornsilk3", cex.main = 1.2)
}
# Load the model
load(file = "/Users/manos/OneDrive/Projects/R/All_Projects/Songs_Lyrics/objects/songs_lda_3.RDA")
# _Calculate Tables ##########################################################
library(tidytext)
ap_topics <- tidy(songs_lda, matrix = "gamma")
test <- right_join(ap_topics, songs[, c("song", "genre")], by = c("document" = "song"))
test %>%
mutate(genre = reorder(genre, gamma * topic)) %>%
ggplot(aes(factor(topic), gamma)) +
geom_boxplot(fill = "steelblue", alpha = 0.7) +
labs(y = "Probability", x = "Topic",
title = "Topic probabilities per music genre",
subtitle = "") +
theme_fivethirtyeight() +
facet_wrap(~ genre)
test %>%
mutate(genre = reorder(genre, gamma * topic)) %>%
ggplot(aes(factor(topic), gamma)) +
geom_boxplot(fill = factor(topic), alpha = 0.7) +
labs(y = "Probability", x = "Topic",
title = "Topic probabilities per music genre",
subtitle = "") +
theme_fivethirtyeight() +
facet_wrap(~ genre)
test %>%
mutate(genre = reorder(genre, gamma * topic)) %>%
ggplot(aes(factor(topic), gamma)) +
geom_boxplot(fill = factor(topic), alpha = 0.7) +
labs(y = "Probability", x = "Topic",
title = "Topic probabilities per music genre",
subtitle = "") +
theme_fivethirtyeight() +
facet_wrap(~ genre)
test %>%
mutate(genre = reorder(genre, gamma * topic)) %>%
ggplot(aes(factor(topic), gamma)) +
geom_boxplot(fill = topic, alpha = 0.7) +
labs(y = "Probability", x = "Topic",
title = "Topic probabilities per music genre",
subtitle = "") +
theme_fivethirtyeight() +
facet_wrap(~ genre)
test %>%
mutate(genre = reorder(genre, gamma * topic)) %>%
ggplot(aes(factor(topic), gamma)) +
geom_boxplot(fill = topic, alpha = 0.7) +
labs(y = "Probability", x = "Topic",
title = "Topic probabilities per music genre",
subtitle = "") +
theme_fivethirtyeight() +
facet_wrap(~ genre)
test %>%
mutate(genre = reorder(genre, gamma * topic)) %>%
ggplot(aes(factor(topic), gamma)) +
geom_boxplot(fill = factor(topic), alpha = 0.7) +
labs(y = "Probability", x = "Topic",
title = "Topic probabilities per music genre",
subtitle = "") +
theme_fivethirtyeight() +
facet_wrap(~ genre)
test %>%
mutate(genre = reorder(genre, gamma * topic)) %>%
ggplot(aes(factor(topic), gamma)) +
geom_boxplot(fill = c("steelblue", "red", "green"), alpha = 0.7) +
labs(y = "Probability", x = "Topic",
title = "Topic probabilities per music genre",
subtitle = "") +
theme_fivethirtyeight() +
facet_wrap(~ genre)
test %>%
mutate(genre = reorder(genre, gamma * topic)) %>%
ggplot(aes(factor(topic), gamma)) +
geom_boxplot(fill = "steelblue", alpha = 0.7) +
labs(y = "Probability", x = "Topic",
title = "Topic probabilities per music genre",
subtitle = "") +
theme_fivethirtyeight() +
facet_wrap(~ genre)
test %>%
mutate(genre = reorder(genre, gamma * topic)) %>%
ggplot(aes(factor(topic), gamma, colour = topic)) +
geom_boxplot(alpha = 0.7) +
labs(y = "Probability", x = "Topic",
title = "Topic probabilities per music genre",
subtitle = "") +
theme_fivethirtyeight() +
facet_wrap(~ genre)
test %>%
mutate(genre = reorder(genre, gamma * topic)) %>%
ggplot(aes(factor(topic), gamma, colour = factor(topic))) +
geom_boxplot(alpha = 0.7) +
labs(y = "Probability", x = "Topic",
title = "Topic probabilities per music genre",
subtitle = "") +
theme_fivethirtyeight() +
facet_wrap(~ genre)
test %>%
mutate(genre = reorder(genre, gamma * topic)) %>%
ggplot(aes(topic = factor(topic), gamma, colour = factor(topic))) +
geom_boxplot(alpha = 0.7) +
labs(y = "Probability", x = "Topic",
title = "Topic probabilities per music genre",
subtitle = "") +
theme_fivethirtyeight() +
facet_wrap(~ genre)
test %>%
mutate(genre = reorder(genre, gamma * topic)) %>%
ggplot(aes(factor(topic), gamma, colour = factor(topic))) +
geom_boxplot(alpha = 0.7) +
labs(y = "Probability", x = "Topic",
title = "Topic probabilities per music genre",
subtitle = "") +
theme_fivethirtyeight() +
facet_wrap(~ genre)
topics_probs %>%
mutate(genre = reorder(genre, gamma * topic)) %>%
ggplot(aes(factor(topic), gamma, colour = factor(topic))) +
geom_boxplot(alpha = 0.7) +
labs(y = "Probability", x = "Topic",
title = "Topic probabilities per music genre",
subtitle = "") +
theme_fivethirtyeight() +
labs(col="Topics") +
facet_wrap(~ genre)
topics_probs %>%
mutate(genre = reorder(genre, gamma * topic)) %>%
ggplot(aes(factor(topic), gamma, colour = factor(topic))) +
geom_boxplot(alpha = 0.7) +
labs(y = "Probability", x = "Topic",
title = "Topic probabilities per music genre",
subtitle = "") +
theme_fivethirtyeight() +
labs(col="Topics") +
facet_wrap(~ genre)
topics_probs <- right_join(ap_topics, songs[, c("song", "genre")], by = c("document" = "song"))
topics_probs %>%
mutate(genre = reorder(genre, gamma * topic)) %>%
ggplot(aes(factor(topic), gamma, colour = factor(topic))) +
geom_boxplot(alpha = 0.7) +
labs(y = "Probability", x = "Topic",
title = "Topic probabilities per music genre",
subtitle = "") +
theme_fivethirtyeight() +
labs(col="Topics") +
facet_wrap(~ genre)
topics_probs %>%
mutate(genre = reorder(genre, gamma * topic)) %>%
ggplot(aes(factor(topic), gamma, colour = factor(topic))) +
geom_boxplot(alpha = 0.7) +
labs(y = "Probability", x = "Topic",
title = "Topic probabilities per music genre",
subtitle = "") +
theme_fivethirtyeight() +
labs(col="Topics",
y = "Probabilities") +
facet_wrap(~ genre)
# Load the model
load(file = "/Users/manos/OneDrive/Projects/R/All_Projects/Songs_Lyrics/objects/songs_lda_2.RDA")
# _Calculate Tables ##########################################################
library(tidytext)
ap_topics <- tidy(songs_lda, matrix = "gamma")
topics_probs <- right_join(ap_topics, songs[, c("song", "genre")], by = c("document" = "song"))
topics_probs %>%
mutate(genre = reorder(genre, gamma * topic)) %>%
ggplot(aes(factor(topic), gamma, colour = factor(topic))) +
geom_boxplot(alpha = 0.7) +
labs(y = "Probability", x = "Topic",
title = "Topic probabilities per music genre",
subtitle = "") +
theme_fivethirtyeight() +
labs(col="Topics",
y = "Probabilities") +
facet_wrap(~ genre)
blogdown:::serve_site()
songs %>%
group_by(genre) %>%
count() %>%
ungroup() %>%
mutate(Freq = n/sum(n))
library(DT)
library(DT)
songs %>%
group_by(genre) %>%
count() %>%
ungroup() %>%
mutate(Freq = n/sum(n)) %>%
datatable()
songs %>%
group_by(genre) %>%
count() %>%
ungroup() %>%
mutate(`Proportion(%)` = n/sum(n)) %>%
arrange(-n) %>%
rename(genre = Genre,
n = `Total songs`) %>%
datatable()
songs %>%
group_by(genre) %>%
count() %>%
ungroup() %>%
mutate(`Proportion(%)` = n/sum(n)) %>%
arrange(-n) %>%
rename(Genre = genre,
`Total songs` = n) %>%
datatable()
songs %>%
group_by(genre) %>%
count() %>%
ungroup() %>%
mutate(`Proportion(%)` = round((n/sum(n))*100, 0) ) %>%
arrange(-n) %>%
rename(Genre = genre,
`Total songs` = n) %>%
datatable()
songs %>%
group_by(genre) %>%
count() %>%
ungroup() %>%
mutate(`Proportion(%)` = round((n/sum(n))*100, 2) ) %>%
arrange(-n) %>%
rename(Genre = genre,
`Total songs` = n) %>%
datatable()
blogdown:::serve_site()
library(DT)
knit_print.data.frame = function(x, ...) {
knit_print(DT::datatable(x), ...)
}
songs %>%
group_by(genre) %>%
count() %>%
ungroup() %>%
mutate(`Proportion(%)` = round((n/sum(n))*100, 2) ) %>%
arrange(-n) %>%
rename(Genre = genre,
`Total songs` = n) %>%
knit_print.data.frame()
library(DT)
library(knitr)
knit_print.data.frame = function(x, ...) {
knit_print(DT::datatable(x), ...)
}
songs %>%
group_by(genre) %>%
count() %>%
ungroup() %>%
mutate(`Proportion(%)` = round((n/sum(n))*100, 2) ) %>%
arrange(-n) %>%
rename(Genre = genre,
`Total songs` = n) %>%
knit_print.data.frame()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(tidyverse)
library(lubridate)
library(ggthemes)
# Insert data
news <- readRDS("/Users/manos/Dropbox/Projects/R/All_Projects/2018_01_Newsbeast/data/newsbeast.all.RDS")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
# Libraries
library(tidyverse)
library(rvest)
library(eurostat)
library(ggthemes)
# Load the dataset
dat <- readRDS("/Users/manos/OneDrive/Projects/R/All_Projects/2018_07_TimeSeriesForecast/data/dat.RDS")
library(forecast)
selected_geo <- "Euro area (19 countries)"
# Filter the quarterly EU19 GDP dataset
dat <-
dat %>%
mutate(geo = as.character(geo)) %>%
filter(unit == "Current prices, million euro",
s_adj == "Unadjusted data (i.e. neither seasonally adjusted nor calendar adjusted data)",
na_item == "Gross domestic product at market prices",
geo %in% selected_geo) %>%
arrange(time)
# Create the time series object
gdp_ts <- ts(dat[, 6], start = c(1995, 1), frequency = 4)
View(dat)
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for Eurozone countries",
subtitle = "with loess curve fitted",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2018, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Simple time series plot
autoplot(gdp_ts, facets = TRUE)+
labs(title = "Quarterly GDP for Eurozone countries",
subtitle = "In million euro (€)",
y = "Quarterly GDP (€)",
x = "year") +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = seq(1995, 2018, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
## Seasonal plot
ggseasonplot(gdp_ts) +
labs(title = "Seasonal GDP plot for Eurozone countries",
y = "GDP (€)")+
theme_fivethirtyeight()
## Lag plot of time series
gglagplot(gdp_ts)+
ggtitle("Lag plot of quarterly GDP for Eurozone countries") +
theme_fivethirtyeight()
## Seasonal plot
ggseasonplot(gdp_ts) +
labs(title = "Seasonal GDP plot for Eurozone countries",
subtitle = "In million euro (€)",
y = "GDP (€)")+
theme_fivethirtyeight()
## Lag plot of time series
gglagplot(gdp_ts)+
labs(title = "Lag plot of quarterly GDP for Eurozone countries",
subtitle = "In million euro (€)",
y = "GDP (€)")+
theme_fivethirtyeight()
# Autocorellation plot
ggAcf(gdp_ts)+
ggtitle("Autocorellation function plot") +
theme_fivethirtyeight()
# Create the training set
train1 <- window(gdp_ts, end = c(2016, 4))
# Fit a seasonal ARIMA model with lambda = 0 - box cox transformation
fit <- auto.arima(train1, lambda = 0)
# Plot residuals
checkresiduals(fit)
# Test accuracy
accuracy(forecast(fit, h = 5), gdp_ts)
# Fit a seasonal ARIMA model with lambda = 0 - box cox transformation for all data
fit <- auto.arima(gdp_ts, lambda = 0)
# Plot forecasts
fit %>%
forecast(h = 8) %>%
autoplot() +
labs(title = "Forecasting of Eurozone countries quarterly GDP",
subtitle = "for years 2018-19",
y = "GDP (€)")+
scale_x_continuous(breaks = seq(1995, 2020, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
3000000*1000000
3000000*1000000
scipen
options(scipen=999)
3000000*1000000
# Fit a seasonal ARIMA model with lambda = 0 - box cox transformation for all data
fit <- auto.arima(gdp_ts, lambda = 0)
# Plot forecasts
fit %>%
forecast(h = 8) %>%
autoplot() +
labs(title = "Forecasting of Eurozone countries quarterly GDP",
subtitle = "In million euro (€), for years 2018-19",
y = "GDP (€)")+
scale_x_continuous(breaks = seq(1995, 2020, 1)) +
theme_fivethirtyeight() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
fit %>%
forecast(h = 8)
fit %>%
forecast(h = 8)
library(flextable)
install.packages("flextable")
install.packages("officer")
library(flextable)
library(officer)
myft <- regulartable(
head(mtcars),
col_keys = c("am", "carb", "gear", "mpg", "drat" ))
myft
library(flextable)
myft <- regulartable(
head(mtcars),
col_keys = c("am", "carb", "gear", "mpg", "drat" ))
myft
View(myft)
library(flextable)
myft <- regulartable(
head(mtcars),
col_keys = c("am", "carb", "gear", "mpg", "drat" ))
myft <- theme_vanilla(myft)
myft
library(flextable)
myft <- regulartable(
head(mtcars),
col_keys = c("am", "carb", "gear", "mpg", "drat" ))
myft <- theme_vanilla(myft)
myft
myft <- merge_v(myft, j = c("am", "carb") )
myft
myft <- set_header_labels( myft, carb = "# carb." )
myft <- width(myft, width = .75) # set width of all columns to .75 in
myft
myft <- autofit(myft)
myft
myft <- autofit(myft)
myft
myft <- italic(myft, j = 1)
myft <- bg(myft, bg = "#C90000", part = "header")
myft <- color(myft, color = "white", part = "header")
myft
myft <- color(myft, ~ drat > 3.5, ~ drat, color = "red")
myft <- bold(myft, ~ drat > 3.5, ~ drat, bold = TRUE)
myft <- autofit(myft)
myft
typology
library(flextable)
myft <- regulartable(
head(mtcars),
col_keys = c("am", "carb", "gear", "mpg", "drat" ))
myft <- theme_vanilla(myft)
myft
myft <- merge_v(myft, j = c("am", "carb") )
myft
myft <- set_header_labels( myft, carb = "# carb." )
myft <- width(myft, width = .75) # set width of all columns to .75 in
myft
myft <- autofit(myft)
myft
myft <- italic(myft, j = 1)
myft <- bg(myft, bg = "#C90000", part = "header")
myft <- color(myft, color = "white", part = "header")
myft
myft <- color(myft, ~ drat > 3.5, ~ drat, color = "red")
myft <- bold(myft, ~ drat > 3.5, ~ drat, bold = TRUE)
myft <- autofit(myft)
myft
plot(iris$Sepal.Length, iris$Petal.Length)
library(forecast)
iris
View(iris)
iris$Sepal.Length
plot(iris$Petal.Length, iris$Petal.Width)
library(tidyverse)
iris %>% ggplot() + geom_point(aes(Sepal.Length, Sepal.Width))
iris %>% ggplot() + geom_point(aes(Sepal.Length, Sepal.Width, color = Species))
iris %>% ggplot() + geom_point(aes(Petal.Width, Petal.Length, color = Species))
iris %>% ggplot() + geom_point(aes(Petal.Width, Petal.Length, color = Species)) + geom_tile("Τα λουλούδια του γραφήματος")
iris %>% ggplot() + geom_point(aes(Petal.Width, Petal.Length, color = Species)) + geom_title("Τα λουλούδια του γραφήματος")
iris %>% ggplot() + geom_point(aes(Petal.Width, Petal.Length, color = Species)) + ggtitle("Τα λουλούδια του γραφήματος")
iris %>% ggplot() + geom_point(aes(Petal.Width, Petal.Length, color = Species)) + ggtitle("Τα λουλούδια του γραφήματος (ΔΗΜΗΤΡΑ ΑΝΤΩΝΙΟΥ)")
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
